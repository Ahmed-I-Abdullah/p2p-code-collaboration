// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Repository_Init_FullMethodName         = "/api.Repository/Init"
	Repository_Pull_FullMethodName         = "/api.Repository/Pull"
	Repository_GetLeaderUrl_FullMethodName = "/api.Repository/GetLeaderUrl"
)

// RepositoryClient is the client API for Repository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryClient interface {
	Init(ctx context.Context, in *RepoInitRequest, opts ...grpc.CallOption) (*RepoInitResponse, error)
	Pull(ctx context.Context, in *RepoPullRequest, opts ...grpc.CallOption) (*RepoPullResponse, error)
	GetLeaderUrl(ctx context.Context, in *LeaderUrlRequest, opts ...grpc.CallOption) (*LeaderUrlResponse, error)
}

type repositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryClient(cc grpc.ClientConnInterface) RepositoryClient {
	return &repositoryClient{cc}
}

func (c *repositoryClient) Init(ctx context.Context, in *RepoInitRequest, opts ...grpc.CallOption) (*RepoInitResponse, error) {
	out := new(RepoInitResponse)
	err := c.cc.Invoke(ctx, Repository_Init_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) Pull(ctx context.Context, in *RepoPullRequest, opts ...grpc.CallOption) (*RepoPullResponse, error) {
	out := new(RepoPullResponse)
	err := c.cc.Invoke(ctx, Repository_Pull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetLeaderUrl(ctx context.Context, in *LeaderUrlRequest, opts ...grpc.CallOption) (*LeaderUrlResponse, error) {
	out := new(LeaderUrlResponse)
	err := c.cc.Invoke(ctx, Repository_GetLeaderUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServer is the server API for Repository service.
// All implementations must embed UnimplementedRepositoryServer
// for forward compatibility
type RepositoryServer interface {
	Init(context.Context, *RepoInitRequest) (*RepoInitResponse, error)
	Pull(context.Context, *RepoPullRequest) (*RepoPullResponse, error)
	GetLeaderUrl(context.Context, *LeaderUrlRequest) (*LeaderUrlResponse, error)
	mustEmbedUnimplementedRepositoryServer()
}

// UnimplementedRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedRepositoryServer struct {
}

func (UnimplementedRepositoryServer) Init(context.Context, *RepoInitRequest) (*RepoInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedRepositoryServer) Pull(context.Context, *RepoPullRequest) (*RepoPullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedRepositoryServer) GetLeaderUrl(context.Context, *LeaderUrlRequest) (*LeaderUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderUrl not implemented")
}
func (UnimplementedRepositoryServer) mustEmbedUnimplementedRepositoryServer() {}

// UnsafeRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryServer will
// result in compilation errors.
type UnsafeRepositoryServer interface {
	mustEmbedUnimplementedRepositoryServer()
}

func RegisterRepositoryServer(s grpc.ServiceRegistrar, srv RepositoryServer) {
	s.RegisterService(&Repository_ServiceDesc, srv)
}

func _Repository_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Repository_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).Init(ctx, req.(*RepoInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Repository_Pull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).Pull(ctx, req.(*RepoPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetLeaderUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetLeaderUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Repository_GetLeaderUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetLeaderUrl(ctx, req.(*LeaderUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Repository_ServiceDesc is the grpc.ServiceDesc for Repository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Repository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Repository",
	HandlerType: (*RepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Repository_Init_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _Repository_Pull_Handler,
		},
		{
			MethodName: "GetLeaderUrl",
			Handler:    _Repository_GetLeaderUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/service.proto",
}
